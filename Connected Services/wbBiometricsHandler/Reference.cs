//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace wbBiometricsHandler
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://sidmach.com/", ConfigurationName="wbBiometricsHandler.BiometricsHandlerSoap")]
    public interface BiometricsHandlerSoap
    {
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://sidmach.com/isCandidateExistsInBarredList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<wbBiometricsHandler.isCandidateExistsInBarredListResponse> isCandidateExistsInBarredListAsync(wbBiometricsHandler.isCandidateExistsInBarredListRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://sidmach.com/isCandidateExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<wbBiometricsHandler.isCandidateExistsResponse> isCandidateExistsAsync(wbBiometricsHandler.isCandidateExistsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sidmach.com/GetBiometricBinary", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<wbBiometricsHandler.GetBiometricBinaryResponseGetBiometricBinaryResult> GetBiometricBinaryAsync(wbBiometricsHandler.ArrayOfXElement Ds);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://sidmach.com/")]
    public partial class isCandidateExistsInBarredListDT
    {
        
        private System.Xml.XmlElement[] anyField;
        
        private System.Xml.XmlElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.XmlElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.XmlElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="isCandidateExistsInBarredList", WrapperNamespace="http://sidmach.com/", IsWrapped=true)]
    public partial class isCandidateExistsInBarredListRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sidmach.com/", Order=0)]
        public wbBiometricsHandler.isCandidateExistsInBarredListDT dt;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sidmach.com/", Order=1)]
        public string strList;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sidmach.com/", Order=2)]
        public string RecID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sidmach.com/", Order=3)]
        public string ErrorMsg;
        
        public isCandidateExistsInBarredListRequest()
        {
        }
        
        public isCandidateExistsInBarredListRequest(wbBiometricsHandler.isCandidateExistsInBarredListDT dt, string strList, string RecID, string ErrorMsg)
        {
            this.dt = dt;
            this.strList = strList;
            this.RecID = RecID;
            this.ErrorMsg = ErrorMsg;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="isCandidateExistsInBarredListResponse", WrapperNamespace="http://sidmach.com/", IsWrapped=true)]
    public partial class isCandidateExistsInBarredListResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sidmach.com/", Order=0)]
        public bool isCandidateExistsInBarredListResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sidmach.com/", Order=1)]
        public string RecID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sidmach.com/", Order=2)]
        public string ErrorMsg;
        
        public isCandidateExistsInBarredListResponse()
        {
        }
        
        public isCandidateExistsInBarredListResponse(bool isCandidateExistsInBarredListResult, string RecID, string ErrorMsg)
        {
            this.isCandidateExistsInBarredListResult = isCandidateExistsInBarredListResult;
            this.RecID = RecID;
            this.ErrorMsg = ErrorMsg;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="isCandidateExists", WrapperNamespace="http://sidmach.com/", IsWrapped=true)]
    public partial class isCandidateExistsRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sidmach.com/", Order=0)]
        public string Surname;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sidmach.com/", Order=1)]
        public string FirstName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sidmach.com/", Order=2)]
        public string OtherName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sidmach.com/", Order=3)]
        public char Gender;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sidmach.com/", Order=4)]
        public System.DateTime DateOfBirth;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sidmach.com/", Order=5)]
        public wbBiometricsHandler.ArrayOfXElement ds;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sidmach.com/", Order=6)]
        public string ErrorMsg;
        
        public isCandidateExistsRequest()
        {
        }
        
        public isCandidateExistsRequest(string Surname, string FirstName, string OtherName, char Gender, System.DateTime DateOfBirth, wbBiometricsHandler.ArrayOfXElement ds, string ErrorMsg)
        {
            this.Surname = Surname;
            this.FirstName = FirstName;
            this.OtherName = OtherName;
            this.Gender = Gender;
            this.DateOfBirth = DateOfBirth;
            this.ds = ds;
            this.ErrorMsg = ErrorMsg;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="isCandidateExistsResponse", WrapperNamespace="http://sidmach.com/", IsWrapped=true)]
    public partial class isCandidateExistsResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sidmach.com/", Order=0)]
        public bool isCandidateExistsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sidmach.com/", Order=1)]
        public string ErrorMsg;
        
        public isCandidateExistsResponse()
        {
        }
        
        public isCandidateExistsResponse(bool isCandidateExistsResult, string ErrorMsg)
        {
            this.isCandidateExistsResult = isCandidateExistsResult;
            this.ErrorMsg = ErrorMsg;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://sidmach.com/")]
    public partial class GetBiometricBinaryResponseGetBiometricBinaryResult
    {
        
        private System.Xml.XmlElement[] anyField;
        
        private System.Xml.XmlElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.XmlElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.XmlElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface BiometricsHandlerSoapChannel : wbBiometricsHandler.BiometricsHandlerSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class BiometricsHandlerSoapClient : System.ServiceModel.ClientBase<wbBiometricsHandler.BiometricsHandlerSoap>, wbBiometricsHandler.BiometricsHandlerSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public BiometricsHandlerSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(BiometricsHandlerSoapClient.GetBindingForEndpoint(endpointConfiguration), BiometricsHandlerSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BiometricsHandlerSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(BiometricsHandlerSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BiometricsHandlerSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(BiometricsHandlerSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BiometricsHandlerSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<wbBiometricsHandler.isCandidateExistsInBarredListResponse> isCandidateExistsInBarredListAsync(wbBiometricsHandler.isCandidateExistsInBarredListRequest request)
        {
            return base.Channel.isCandidateExistsInBarredListAsync(request);
        }
        
        public System.Threading.Tasks.Task<wbBiometricsHandler.isCandidateExistsResponse> isCandidateExistsAsync(wbBiometricsHandler.isCandidateExistsRequest request)
        {
            return base.Channel.isCandidateExistsAsync(request);
        }
        
        public System.Threading.Tasks.Task<wbBiometricsHandler.GetBiometricBinaryResponseGetBiometricBinaryResult> GetBiometricBinaryAsync(wbBiometricsHandler.ArrayOfXElement Ds)
        {
            return base.Channel.GetBiometricBinaryAsync(Ds);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BiometricsHandlerSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.BiometricsHandlerSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BiometricsHandlerSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://www.waeconline.org.ng/BiometricsHandler/BiometricsHandler.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.BiometricsHandlerSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://www.waeconline.org.ng/BiometricsHandler/BiometricsHandler.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            BiometricsHandlerSoap,
            
            BiometricsHandlerSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.1.0.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
